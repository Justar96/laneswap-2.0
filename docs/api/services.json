{
  "title": "Services API",
  "description": "API endpoints for managing services in LaneSwap",
  "baseUrl": "/api",
  "endpoints": [
    {
      "id": "register-service",
      "path": "/services",
      "method": "POST",
      "title": "Register a Service",
      "description": "Register a new service with the LaneSwap system",
      "requestBody": {
        "contentType": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the service",
              "required": true
            },
            "metadata": {
              "type": "object",
              "description": "Additional metadata for the service",
              "required": false
            }
          }
        },
        "example": {
          "name": "my-service",
          "metadata": {
            "version": "1.0.0",
            "environment": "production"
          }
        }
      },
      "responses": [
        {
          "status": 201,
          "description": "Service registered successfully",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "service_id": {
                "type": "string",
                "description": "Unique identifier for the service"
              },
              "name": {
                "type": "string",
                "description": "Name of the service"
              },
              "status": {
                "type": "string",
                "description": "Current status of the service"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the service was created"
              },
              "last_heartbeat": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of the last heartbeat received",
                "nullable": true
              },
              "metadata": {
                "type": "object",
                "description": "Additional metadata for the service"
              }
            }
          },
          "example": {
            "service_id": "550e8400-e29b-41d4-a716-446655440000",
            "name": "my-service",
            "status": "unknown",
            "created_at": "2023-09-01T12:00:00Z",
            "last_heartbeat": null,
            "metadata": {
              "version": "1.0.0",
              "environment": "production"
            }
          }
        },
        {
          "status": 400,
          "description": "Invalid request",
          "contentType": "application/json",
          "example": {
            "detail": "Invalid service name"
          }
        }
      ],
      "codeExamples": [
        {
          "language": "curl",
          "code": "curl -X POST http://localhost:8000/api/services \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"my-service\", \"metadata\": {\"version\": \"1.0.0\", \"environment\": \"production\"}}'"
        },
        {
          "language": "python",
          "code": "import requests\n\nresponse = requests.post(\n    \"http://localhost:8000/api/services\",\n    json={\n        \"name\": \"my-service\",\n        \"metadata\": {\"version\": \"1.0.0\", \"environment\": \"production\"}\n    }\n)\n\nservice = response.json()\nprint(f\"Service ID: {service['service_id']}\")"
        },
        {
          "language": "javascript",
          "code": "fetch('http://localhost:8000/api/services', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'my-service',\n    metadata: { version: '1.0.0', environment: 'production' }\n  })\n})\n.then(response => response.json())\n.then(service => console.log(`Service ID: ${service.service_id}`))"
        }
      ]
    },
    {
      "id": "get-all-services",
      "path": "/services",
      "method": "GET",
      "title": "Get All Services",
      "description": "Retrieve a list of all registered services",
      "parameters": [
        {
          "name": "status",
          "in": "query",
          "description": "Filter services by status",
          "required": false,
          "schema": {
            "type": "string",
            "enum": ["healthy", "warning", "error", "critical", "unknown"]
          }
        },
        {
          "name": "limit",
          "in": "query",
          "description": "Maximum number of services to return",
          "required": false,
          "schema": {
            "type": "integer",
            "default": 100
          }
        }
      ],
      "responses": [
        {
          "status": 200,
          "description": "List of services",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "services": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "service_id": {
                      "type": "string",
                      "description": "Unique identifier for the service"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the service"
                    },
                    "status": {
                      "type": "string",
                      "description": "Current status of the service"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the service was created"
                    },
                    "last_heartbeat": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the last heartbeat received",
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Additional metadata for the service"
                    }
                  }
                }
              }
            }
          },
          "example": {
            "services": [
              {
                "service_id": "550e8400-e29b-41d4-a716-446655440000",
                "name": "my-service",
                "status": "healthy",
                "created_at": "2023-09-01T12:00:00Z",
                "last_heartbeat": "2023-09-01T12:01:00Z",
                "metadata": {
                  "version": "1.0.0",
                  "environment": "production"
                }
              }
            ]
          }
        }
      ],
      "codeExamples": [
        {
          "language": "curl",
          "code": "curl -X GET http://localhost:8000/api/services"
        },
        {
          "language": "python",
          "code": "import requests\n\nresponse = requests.get(\"http://localhost:8000/api/services\")\nservices = response.json()[\"services\"]\n\nfor service in services:\n    print(f\"{service['name']}: {service['status']}\")"
        },
        {
          "language": "javascript",
          "code": "fetch('http://localhost:8000/api/services')\n  .then(response => response.json())\n  .then(data => {\n    data.services.forEach(service => {\n      console.log(`${service.name}: ${service.status}`);\n    });\n  });"
        }
      ]
    },
    {
      "id": "get-service",
      "path": "/services/{service_id}",
      "method": "GET",
      "title": "Get Service",
      "description": "Retrieve details for a specific service",
      "parameters": [
        {
          "name": "service_id",
          "in": "path",
          "description": "ID of the service to retrieve",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": [
        {
          "status": 200,
          "description": "Service details",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "service_id": {
                "type": "string",
                "description": "Unique identifier for the service"
              },
              "name": {
                "type": "string",
                "description": "Name of the service"
              },
              "status": {
                "type": "string",
                "description": "Current status of the service"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the service was created"
              },
              "last_heartbeat": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of the last heartbeat received",
                "nullable": true
              },
              "message": {
                "type": "string",
                "description": "Latest heartbeat message",
                "nullable": true
              },
              "metadata": {
                "type": "object",
                "description": "Additional metadata for the service"
              }
            }
          },
          "example": {
            "service_id": "550e8400-e29b-41d4-a716-446655440000",
            "name": "my-service",
            "status": "healthy",
            "created_at": "2023-09-01T12:00:00Z",
            "last_heartbeat": "2023-09-01T12:01:00Z",
            "message": "Service is running normally",
            "metadata": {
              "version": "1.0.0",
              "environment": "production"
            }
          }
        },
        {
          "status": 404,
          "description": "Service not found",
          "contentType": "application/json",
          "example": {
            "detail": "Service not found"
          }
        }
      ],
      "codeExamples": [
        {
          "language": "curl",
          "code": "curl -X GET http://localhost:8000/api/services/550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "language": "python",
          "code": "import requests\n\nservice_id = \"550e8400-e29b-41d4-a716-446655440000\"\nresponse = requests.get(f\"http://localhost:8000/api/services/{service_id}\")\nservice = response.json()\n\nprint(f\"{service['name']}: {service['status']}\")"
        },
        {
          "language": "javascript",
          "code": "const serviceId = '550e8400-e29b-41d4-a716-446655440000';\n\nfetch(`http://localhost:8000/api/services/${serviceId}`)\n  .then(response => response.json())\n  .then(service => {\n    console.log(`${service.name}: ${service.status}`);\n  });"
        }
      ]
    },
    {
      "id": "delete-service",
      "path": "/services/{service_id}",
      "method": "DELETE",
      "title": "Delete Service",
      "description": "Delete a service and all its associated data",
      "parameters": [
        {
          "name": "service_id",
          "in": "path",
          "description": "ID of the service to delete",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": [
        {
          "status": 204,
          "description": "Service deleted successfully"
        },
        {
          "status": 404,
          "description": "Service not found",
          "contentType": "application/json",
          "example": {
            "detail": "Service not found"
          }
        }
      ],
      "codeExamples": [
        {
          "language": "curl",
          "code": "curl -X DELETE http://localhost:8000/api/services/550e8400-e29b-41d4-a716-446655440000"
        },
        {
          "language": "python",
          "code": "import requests\n\nservice_id = \"550e8400-e29b-41d4-a716-446655440000\"\nresponse = requests.delete(f\"http://localhost:8000/api/services/{service_id}\")\n\nif response.status_code == 204:\n    print(\"Service deleted successfully\")"
        },
        {
          "language": "javascript",
          "code": "const serviceId = '550e8400-e29b-41d4-a716-446655440000';\n\nfetch(`http://localhost:8000/api/services/${serviceId}`, {\n  method: 'DELETE'\n})\n.then(response => {\n  if (response.status === 204) {\n    console.log('Service deleted successfully');\n  }\n});"
        }
      ]
    }
  ]
} 